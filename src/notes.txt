
    //Scene* scene = &engine.testscene;
    Scene myscene;
    engine.SCENE_set_active(&myscene);

    engine.SCENE_new_material(&myscene,"assets/tex.png", "SmileTexture");
    engine.SCENE_new_material(&myscene,"assets/tabletexture.png", "Table_Texture");

    Object* cool_object = engine.SCENE_new_object(&myscene,"assets/ball.obj", "Cube", "SmileTexture");
    engine.SCENE_new_object(&myscene,"assets/table.obj", "TestAsset", "Table_Texture");
    //engine.SCENE_new_object(&myscene,"assets/ball.obj", "TestAsset2", "none");

    std::vector<Object*> balls;

    int ballcount = 5;
    //int offset = 0;

    float ballscale = 0.2f;

    for (int e = 0; e < 5; e++) {
        for (int i = 0; i < ballcount; i++) {
            Object* cool_object = engine.SCENE_new_object(&myscene,"assets/ball.obj", "Cube", "none");

            float fi = (float) i;
            float fe = (float) e;
            //float foffset = (float) offset;

            glm::vec3 objcenter = {((fi-(float) ballcount/2))* ballscale,1.3f,fe* ballscale};
            glm::vec3 scaleval = {0.5f * ballscale,0.5f* ballscale,0.5f* ballscale};
            //cool_object->transform = glm::translate(glm::mat4(1.f), objcenter);
            cool_object->SetPosition(objcenter);
            cool_object->Scale(scaleval);

            balls.push_back(cool_object);
        }
        ballcount--;
       // offset++;
    }


    while (engine.StepEngine()) {

        glm::vec3 objcenter = {sin(engine.tick*4) * 10.0f,0.0f,0.0f};
        cool_object->SetPosition(objcenter);
       // glm::vec3 sc = {cos(engine.tick*2) * 5.0f,1.0f,1.0f};

        //cool_object->transform = glm::translate(glm::mat4(1.f), objcenter);

       
        //cool_object->transform = glm::scale(cool_object->transform,sc);

    }

    std::cout << "ended" << std::endl;

    engine.cleanup();

    
    return 0;